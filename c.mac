;---------------------------------------------------------------------------
;
; Rc702 CP/M bios.  Disassembled and customized by Thorbj|rn Andersen 
; 9101->  (LaTex: Thorbj{\o}rn).  Comments written in English 9105
;
;--------------------------------------------------------------------------
;
; This version has been modified as follows:
;
;
; Keyboard and AuxIn now has an interrupt driven buffer (allows "typeahead")
;
; CRT circuit shows 26 lines.  Line 26 is driven by STATL.MAC
;
; Canceled CONOUT Control char sequences has been changed towards VT52 level
; 
; CDEF.MAC contains the user modifiable options.
;
; A status line menu has been added for RunTime adjustments of behavior
; -------------------------------------------------------------------------
;
; Notes:
;
; Whenever X.Y is mentioned, it is referring to the Y'th bit of X when
; Y is a digit.  Otherwise it may be an index in a record (Pascalwise)
;
; In the PRN file, the subttl allways shows the name of the source file.
;
; -------------------------------------------------------------------------
; MEMORY MAP  (LOAD TIME)
;
; $0000	Bootloader reads whole bios image in here.  INIT.MAC code immediately
;	moves it up high, and jumps to $D700.
;
; $D500	Long term Configuration datablock (See xxxx.MAC)
; $D580	CONIN key map table. Will be moved to $F680
; $D600	CONOUT char map.  Will be moved to $F700
; $D700	INIT code.
; =================== Start of permanent part of bios ============
; $DA00	Resident part of bios, including dataareas.
; $F680	CONIN key map.  Only low ascii (7 bit) is mapped (128 bytes)
; $F700	CONOUT char map.  Mapping will only take place if semigraphics
;	isn't active.
; $F800	Start of screen memory (See CONOUT.MAC)
;
;---------------------------------------------------------------------------

	title	Rc700 bios --
	subttl	File: C.MAC
	.Z80

	INCLUDE	CDEF.MAC	; Define implementation.
	INCLUDE	CMACROS.MAC	; Macros for this
	subttl	File: C.MAC

	IF1
	.PRINTX +----------------+
	.PRINTX	! Rc700 BIOS     I Th 91 ! 
	.PRINTX +----------------+
	ELSE
	.PRINTX	..
	.PRINTX	.** Second pass **.
	ENDIF

	if	usephase
	 aseg			;
	 org	380h		;
 	 .PHASE	0D700H		; 
	else
	  dseg
	endif
				; The definitions below shows the parts
				; of the disassembly I haven't cleaned yet.
				; This primarily concerns the Configuration
				; block.
	
True		equ	0FFh	; Used by some status routines.
False		equ	000h	;

BIOSBASE	EQU	0da00h	;
SectorSize	EQU	80h	;

BDOS		EQU	05H	; 

BDOSENTRY	EQU	0CC06H	; 

CCPCLEAN	EQU	0C403H	; 
CCPENTRY	EQU	0C400H	; 
CMDLENGTH	EQU	0C407H	; 

CMOTOROFFTIM	EQU	0D52DH	; 
CODEDESTINAT	EQU	0D480H	; 
CODELENGTH	EQU	2381H	; 
CONVLENGTH	EQU	0180H	; 
CONVLOADADDR	EQU	0D580H	; 

CRT0		EQU	0D520H	; 
CRT1		EQU	0D521H	; 
CRT2		EQU	0D522H	; 
CRT3		EQU	0D523H	; 
CTC0C		EQU	0D500H	; 
CTC0T		EQU	0D501H	; 
CTC1C		EQU	0D502H	; 
CTC1T		EQU	0D503H	; 
CTC2C		EQU	0D504H	; 
CTC2T		EQU	0D505H	; 
CTC3C		EQU	0D506H	; 
CTC3T		EQU	0D507H	; 
CURDISK		EQU	04H	; 
CXB4Y		EQU	0D52CH	; 
DEFDMAAREA	EQU	80H	; 
DMA0INIT	EQU	0D51CH	; 
DMA2INIT	EQU	0D51EH	; 
DMA3INIT	EQU	0D51FH	; 
DPBSIZE		EQU	0FH	; 
FCBINITDATA	EQU	0D524H	; 
IFLOPCONF	EQU	0D52FH	; 
IHDCONF		EQU	0D531H	; 
IOBYTE		EQU	03H	; 
LC409		EQU	0C409H	; 
LD526		EQU	0D526H	; 
LD540		EQU	0D540H	; 
LD541		EQU	0D541H	; 
LD544		EQU	0D544H	; 
LD545		EQU	0D545H	; 
LD546		EQU	0D546H	; 
LINELENGTH	EQU	4FH	; 
LOADADDR	EQU	0100H	;
PRINTBYTE	EQU	0D519H	; 
PRINTINIT	EQU	0D511H	; 
SCREENLENGTH	EQU	07CFH	; 
TERMBYTE	EQU	0D50EH	; 
TERMINIT	EQU	0D508H	; 
		PAGE		;
;---------------------------------------------------------------
;
; RC700 BIOS DISASSEMBLET DEC. 1990/THORBJOERN
;
; Start of overwritable initialization code.
;
START:				; BEGIN
	INCLUDE	INIT.MAC
	subttl	File: C.MAC

	if	usephase
	 ds	BIOSBASE-$	; Insert space for L80
	else
	 cseg
	endif

;-------------------------------------------------------------------
;
; Permanent part of the bios.
;
; To maintain compabillity with several utilities does the biosbase
; begin at $DA00.
;
;-------------------------------------------------------------------

				;	.phase	BIOSBASE
JPCOLDBOOT:			; 
	JP	COLDBOOT	; 
JPWARMBOOT:			; 
	JP	WARMBOOT	; 
	JP	KEYSTATUS	; 
	JP	READKEY		; 
	JP	COUT		; 
	JP	List		;
	JP	AUXOUT		; 
	JP	AUXIN		; 
	JP	DSKHOME		; 
	JP	SELDSK		; 
	JP	SETTRK		; 
	JP	SETSEC		; 
	JP	SETDMA		; 
	JP	DSKREAD		; 
	JP	DSKWRITE	; 
	JP	ListSt		; 
	JP	SECTRAN		; 
				; Ready for nonstandard data area.

XB4Y:		DB	0	; Do we have X before Y in a GotoXY?
TERMBITS:	DB	0	; AuxIn/Out bytelength information (5-8 bits)
PRINTBITS:	DB	0	;    LstOut bytelength information (5-8 bits)

		db	0	; Unknown use.
;
; Drive configuration.   Room for all 16 drives.
;
; $00= 8" SS/SD, $08= 8" DS/DD, $10=5".  
; $16= Special page 0 head 1 format. 
; $FF= Not present
; The rest is various HD formats.
;
DR0:	DB	0FFH,0FFH	; Drives A: and B:
DR2:	DB	0FFH		; Drive C: is set up by HDSelect.

DRVHDCONF:			; The rest of the HD drives.
	DB	0FFH,0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
	DB	0FFH,0FFH,0FFH,0FFH,0FFH,0FFH
;
; If Zero then the boot was from floppy, otherwise from the harddisk
BOOTDRIVE:	NOP			; 
		OR	A		; 
		RET	Z		; 

jpFDCst:	JP	Wait$FDC$RES	; Wait for FDC to be done with operation
JPAUXSTATUS:	JP	AuxStatus	; 
JPLINESEL:	JP	LINESEL		; 
JPEXIT:		JP	EXIT		; 
JPCLOCK:	JP	CLOCK		; 

JPBIOS5C:				; 
	IF 	UseHD			;
	 JP	LE954			; -- Send command to HD controller
	else				;
	 JP	0			; Warmboot when trying to write to HD
	endif

JPRESERVED:				; 
	DS	0013H			; 

;	end of jump vectors.  Include some buffer stuff
;

LDA6F:	DW	0		; 

DISKERRMSG:	DB	0DH,0AH,'Disk read error - reset  :(',0DH,0AH,0

	INCLUDE	SIGNON.MAC

	if	UseHD
WAITMSG:	DB	0CH,    'Waiting',                          0 	
CANNOTMSG:	DB	0CH,    'Cannot read configuration record', 0DH,0AH,0
	endif

; PRINTSTR:
; Prints an ASCIIZ string to console
;

PRINTSTR:			; PROCEDURE PrintStr(HL:^STR);
	LD	A,(HL)		; BEGIN
	OR	A		;   ch:= MEM(hl);
	RET	Z		;   WHILE ch<>@0 DO
	PUSH	HL		;   BEGIN
	LD	C,A		;     Write(ch);
	CALL	COUT		;     hl:= hl+1;
	POP	HL		;     ch:= MEM(hl);
	INC	HL		;   END;
	jr	PRINTSTR	; END;
DISKERR:			; 
	LD	HL,DISKERRMSG	; 
	CALL	PRINTSTR	; 
WAITRESET:			; Should be made to RETURN try again.
	jr	WAITRESET	; Fortunately obsolete under Z-System


; EXIT:   (Sets up routine to be called in a given number of ticks)
;
; HL=Addr(ExitRoutine),  DE= Ticks (secs/50)
;

EXIT:				; 
	LD	A,0C3H		; Set up jump...
	LD	(EXJP),A	; 
	LD	(EXJPADDR),HL	; 
	EX	DE,HL		; 
	LD	(EXITCOUNT),HL	; and init the counter
	RET			; 

; CLOCK:  (Sets or reads the clock (counter version only))
; 
; 
; A=0 : Set clock to (HL, DE)
; A=1 : Reads clock to (HL, DE) where HL is the high part.
;
CLOCK:				; Modified 930424/Th
	cp	0		; 
	jr	Z,SETCLOCK	; 
	cp	1
	jr	Z,GETCLOCK
	ld	hl, cl$yy	; HL:= YYMMDD area
;	ld	de, cl$tt	; DE:= TTMMSS area
	ret
	
GETCLOCK:
	di
	LD	DE,(CLOCKLOW)	; 
	LD	HL,(CLOCKHIGH)	; 
	EI			; 
	RET			; 
SETCLOCK:			; 
	di
	LD	(CLOCKLOW),DE	; 
	LD	(CLOCKHIGH),HL	; EI added 910309 (could cause trouble)
	ei			; 
	RET			;
	
	if	UseHD
;-----------------------------------------------------------------------
;
; Several very wierd routines.  DON'T modify!  Fortunately I do not
; need them!   :)
;
SWAPD89ADB6F:			; 
	 XOR	A		;SWITCH TO HARDDISK BOOT
	 LD	(LD84C),A	; 
	 LD	HL,(LD89A)	; 
	 LD	(LDA6F),HL	; 
	 LD	HL,MOVEDA6FD89A	; 
	 LD	(LD89A),HL	; 
	 RET			; 
MOVEDA6FD89A:			; 
	 PUSH	HL		; 
	 LD	HL,(LDA6F)	; 
	 LD	(LD89A),HL	; 
	 POP	HL		; 
	 RET			; 
	endif
	page			;
;
; COLDBOOT:
;
; Please note that this is in the permanent part.  NO circuit setup is
; performed.
;
COLDBOOT:			;PROCEDURE ColdBoot;
	LD	SP,DEFDMAAREA	;BEGIN
	LD	HL,SIGNONMSG	;  sp:= $80;
	CALL	PRINTSTR	;  Write(ClrHom, 'Rc702 bios');
COLDRESET:			; 
	XOR	A		;  CurDisk:= 0;
	LD	(CURDISK),A	; 
	LD	(FIRSTLOAD),A	;  FirstLoad=FALSE;
	LD	A,(BOOTDRIVE)	;  (* Used by entry to the CCP *)
	OR	A		; 
	jr	Z,LDB94		;  IF BootDrive<>0 THEN
	LD	A,2		;  BEGIN    (* Set default disk to C: *)
	LD	(CURDISK),A	;    CurDisk:= 2;
LDB94:				;  END;
	XOR	A		; 
	LD	(HSTACT),A	;    HostActive:= 0;
	LD	(ERFLAG),A	;    ErrorFlag:= 0;
	LD	(HSTWRT),A	;    HostWrite:= 0;
	IN	A,(14H)		; 
	AND	80H		;    IF 5" machine THEN 
	jr	Z,WARMBOOT	;    BEGIN
	LD	A,(DRNO)	;
	CP	2		; 
	jr	NC,LDBBE	;      (* A<2 =>DBBE *)
	LD	C,1		; 
	CALL	SELDSK		;      IF (DrNo>=2) AND (B: is fixed) THEN 
	CALL	DSKHOME		;        DrNo:= 0
	LD	A,B		;      ELSE
	AND	10H		;        DrNo:= 1;
	LDA0			;
	jr	NZ,LDBBE	;    END;
	INC	A		;    WarmBoot;
LDBBE:				;  END;
	LD	(DRNO),A	;END Coldboot;
				;
WARMBOOT:			;PROCEDURE WarmBoot; 
	EI			;BEGIN
	LD	C,0		;  EnableInterrupts;
	LD	A,(BOOTDRIVE)	;  IF BootDrive= 0 THEN
	OR	A		;    Bootfrom:= A:
	JR	Z,BOOTDISKOK	;  ELSE
	LD	A,2		;    BootFrom:= C:
	LD	C,A		; 
BOOTDISKOK:			;  SelectDrive(BootFrom)
	CALL	SELDSK		; 
	XOR	A		;  
	LD	(UNACNT),A	; 
	LD	(IOBYTE),A	;  IObyte:= 0;
	LD	(CURDRIVE),A	;  CurrentDrive:= A:;
;	LD	(KEYREADY),A	;  (* Zap(Keybuffer); Not used with buffer *)
	CALL	DSKHOME		;  DiskHome(BootFrom);
				;
				;OK - BIOS IS OK - LET'S LOAD THE CCP & BDOS
				;
	LD	SP,DEFDMAAREA	;  SetStack($80);
	LD	BC,CCPENTRY	;  SectorGoes:= Addr(CCPEntry);
	CALL	SETDMA		; 
	LD	BC,1		;  Track:= 1;
	CALL	SETTRK		; 
	LD	BC,0		; 
	CALL	SETSEC		;  
NEXTCCPBLOCK:			;  FOR Sector:= 0 TO 43 DO
	PUSH	BC		;  BEGIN
	CALL	DSKREAD		;    SectorRead(Track, Sector, SectorGoes, Error);
	OR	A		; 
	JP	NZ,DISKERR	;    IF Error THEN DiskError;
	LD	HL,(DMAAREA)	; 
	LD	DE, SectorSize	;    SectorGoes:= SectorGoes+ SectorSize;   
	ADD	HL,DE		; 
	LD	B,H		; 
	LD	C,L		; 
	CALL	SETDMA		; 
	POP	BC		; 
	INC	BC		; 
	CALL	SETSEC		; 
	LD	A,C		; 
	CP	44		;  END;
	jr	NZ,NEXTCCPBLOCK	; 
				; Disk reads done.  Now setup the last
	LD	BC,DEFDMAAREA	; variables to confirm to CP/M specs.
	CALL	SETDMA		; 
	LD	A,0C3H		;  SetDma( $80);
	LD	(0),A		; 
	LD	HL,JPWARMBOOT	;  Mem(.0..2.):= "JP JPWARMBOOT"
	LD	(1),HL		; 
	LD	(BDOS),A	; 
	LD	HL,BDOSENTRY	;  Mem(.5..7.):= "JP BDOS"
	LD	(6),HL		; 
	LD	A,(CURDISK)	; 
	AND	0FH		; 
	LD	C,A		; 
	LD	A,(BOOTDRIVE)	; 
	CP	C		; 
	JR	Z,WBDRIVEOK	; If the current disk cannot be selected or
	CALL	SELDSK		; the directory is unreadable, then we will
	LD	A,H		; log in the bootdrive.  (* This should
	OR	L		; avoid deadlock at select error *)
	JR	Z,SWITCHTOBOOT	; 
	LD	BC,2		; 
	CALL	SETTRK		; 
	CALL	SETSEC		; 
	CALL	DSKREAD		; 
	OR	A		; 
	JR	Z,WBDRIVEOK	; 
SWITCHTOBOOT:			; 
	LD	A,(BOOTDRIVE)	; 
	LD	(CURDISK),A	; 
WBDRIVEOK:			; 
	LD	A,(CURDISK)	; 
	AND	0FH		; 
	LD	C,A		; 
	if	UseHD
	 CP	2		; 
	 CALL	NC,SWAPD89ADB6F	;SET SOMETHING UP TO SHOW THAT HARDDISK IS ACTIVE
	endif
	CALL	SELDSK		; 
	LD	A,(CURDISK)	; 
	LD	C,A		;  C:= CurrentDrive; (* Req. by ccp *)
	LD	HL,FIRSTLOAD	; 
	LD	A,(HL)		;  
	LD	(HL),1		;  
	OR	A		;  
	JR	Z,DOCCPCMD	; 
	LD	A,(CmdLength)	;
	OR	A		; 
	JR	Z,DOCCPCMD	; 
	LD	HL,LC409	;     
	ADD	A,L		; 
	LD	L,A		; 
	LD	A,(HL)		; 
	OR	A		; 
	JP	Z,CCPCLEAN	; 
DOCCPCMD:			; 
	JP	CCPENTRY	;DO COMMAND IN CCP-BUFFER
	page

;---------------------------------------------------------------
;
;INTDISPLAY.  CALLED 50 TIMES A SECOND.
;
;---------------------------------------------------------------

INTDISPLAY:			; PROCEDURE IntDisplay;
	LD	(SAVESP),SP	; INTERRUPT;
	LD	SP,INTSTACK	; 
	PUSH	AF		; 
	PUSH	BC		; 
	PUSH	DE		; 
	PUSH	HL		; BEGIN
				;
				;SETUP DMA FOR SCREEN REFRESH - Channel 2
				;---------
				;
	IN	A,(CRTctrl)	; Get the CRT status register (unused)
	LD	A,00000110b	; 
	OUT    (dmasinglebit),A	; Mask in channel 2 and 3.
	LD	A,00000111b	; 
	OUT    (dmasinglebit),A	; Reset flip/flop (word hi/low) and get
	OUT	(dmaclrff),A	; ready for word transmission.
	LD	HL,SCREENBASE	; 
	LD	A,L		; DMA[2].BaseAddress:= Screenbase;
	OUT	(0F4H),A	; 
	LD	A,H		; 
	OUT	(0F4H),A	; 
	LD	HL,SCREENSIZE	; 
	LD	A,L		; DMA[2].WordCount:= Screenlength;
	OUT	(0F5H),A	; 
	LD	A,H		; 
	OUT	(0F5H),A	; 
	LDA0			; 
	OUT	(0F7H),A	; DMA[3].WordCount:= 0;  (* Inactive *)
	OUT	(0F7H),A	; 
	LD	A,00000010b	; 
	OUT    (dmasinglebit),A	; 
	LD	A,00000011b	; 
	OUT    (dmasinglebit),A	; Mask out channel 2 and 3.
	LD	A,11010111b	; CTC[2].Control:= Interrupt+ Counter+
	OUT	(0EH),A		;   16xValue+ RisingEdge+ 
	LD	A,1		;   TimeConstant+ SoftwareReset;
	OUT	(0EH),A		; CTC[2].TimeConstant= 1;
				; 
				;
				; UPDATE REAL TIME CLOCK
				; ----------------------
	LD	HL,CLOCKLOW	;   Clock[0]:= Clock[0]+1;
	INC	(HL)		;   IF Clock[0]=0 THEN
	jr	NZ,INTCHECKEXIT	;   BEGIN
	INC	HL		;     Clock[1]:= Clock[1]+1;
	INC	(HL)		;     IF Clock[1]=0 THEN
	jr	NZ,INTCHECKEXIT	;     BEGIN
	INC	HL		;       Clock[2]:= Clock[2]+1;
	INC	(HL)		;       IF Clock[2]=0 THEN
	jr	NZ,INTCHECKEXIT	;       
	INC	HL		;         Clock[3]:= Clock[3]+1;
	INC	(HL)		;     END;

INTCHECKEXIT:			;   END;

	if	UseClock	;
	 call	tick		; Update the Clock
	endif

	LD	HL,(EXITCOUNT)	;   (* Check for exit routine activation *)
	LD	A,L		;   IF ExitCount<>0 THEN
	OR	H		;   BEGIN
	jr	Z,NOEXITNOW	;     ExitCount:= ExitCount-1;
	DEC	HL		;     IF ExitCount=0 THEN
	LD	A,L		;       ExitProc;
	OR	H		;   END;
	LD	(EXITCOUNT),HL	; 
	CALL	Z,EXJP		; 
NOEXITNOW:			;   (* Do we need to stop the disk motor *)
	LD	HL,(MOTORCOUNT)	;   IF MotorCount<>0 THEN
	LD	A,L		;   BEGIN
	OR	H		;     MotorCount:= MotorCount-1;
	jr	Z,MOTOROK	;     IF MotorCount=0 THEN
	DEC	HL		;       StopMotor;
	LD	A,L		;   END;
	OR	H		; 
	LD	(MOTORCOUNT),HL	; 
	CALL	Z,STOPMOTOR	; 
MOTOROK:			; 
	LD	HL,(WAITCOUNT)	;   IF WaitCount<>0 THEN
	LD	A,L		;     WaitCount:= WaitCount-1;
	OR	H		; 
	jr	Z,INTDISPLAYRE	; 
	DEC	HL		; 
	LD	(WAITCOUNT),HL	; 
INTDISPLAYRE:			; 
	POP	HL		; 
	POP	DE		; 
	POP	BC		; 
	POP	AF		; 
	LD	SP,(SAVESP)	; 
	EI			; 
	RETI			; ENDINT;

IntIgnore:			; 
	EI			; 
	RETI			; 
				;
	page

	ds 100h-(($-JPCOLDBOOT) AND 0ffh)	;  Next page boundary

; 
;
;INTERRUPT VECTOR PAGE.  
;
;

INTERRUPTPAGE::

	DW	IntIgnore	; 
	DW	IntIgnore	; 
	DW	INTDISPLAY	; 
	DW	INTFDC		; 
	if	UseHD
	 DW	INTHD		; 
	else
	 dw	intignore
	endif
	DW	IntIgnore	; 
	DW	IntIgnore	; 
	DW	IntIgnore	; 
				; SIO interrupts
				; Port A= Terminal port, Port B=Printer
				;
	DW	BtxbEmpty	;   INTLST	; Has sent char.
	DW	BextStat	;   LDD22	; 
	DW	BrxChar		;   INTAI	; Has rec. char.
	DW	BSpRxCond	;   INTLSTERROR	; 
	DW	AtxbEmpty	;   INTAOERROR	; Has sent char
	DW	AextStat	;   LDD86	; 
	DW	ArxChar		;   LDD9F	; Has rec. char
	DW	ASpRxCond	;   LDDB9	; 
				;
				; PIO interrupts.
	DW	KEYINTERRUPT	; Not much fuss here.
	DW	INTPAR		; 


;** KEYREADY:	DB	0	; ** Char ready from keyboard??

PARREADY:	DB	0	; Is the Parallel port ready?

;
; The only interrupt routine the parallelport has. (Poor little thing)
; It is dreadly dull.
;
INTPAR:				; PROCEDURE ParallelInterrupt;
	LD	(SAVESP),SP	; BEGIN
	LD	SP,INTSTACK	;   (* Enter interupt *)
	PUSH	AF		;   ParReady:= TRUE;
	LD	A,True		;   (* Exit Interrupt *)
	LD	(PARREADY),A	; END;
	POP	AF		; 
	LD	SP,(SAVESP)	; 
	EI			; 
	RETI			; 

	INCLUDE	QUEUE.MAC

	INCLUDE	CONIN.MAC	; Keyboard input

	if	UseClock
	 INCLUDE	CLOCK.MAC
	 page
	endif

	INCLUDE	STATL.MAC	; Statusline update/select
	page

	INCLUDE	KEYINT.MAC	; The KEYBOARD menu routines.
	page

	INCLUDE	SERIAL.MAC	; The SERIAL PORT routines.
	page

	INCLUDE	CONOUT.MAC	; The CONOUT routines (All screen management)
	page

	INCLUDE	DISKIO.MAC	; (* All Floppy/Harddisk routines *)
	page

	INCLUDE	LINESEL.MAC	; (* lineselector routine *)

bioscodeend::	
	db	0

	INCLUDE	CDATA.MAC	;

	if	usephase
	.dephase
	endif
				; 
	end			; 
;
; That is most definately all, folks.
;
